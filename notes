Ep2 learnings:

- npm => fullform is not Node Package Manager, but it is one.
- caret(^) vs tilde(~)
- package.json vs package-lock.json
- node_modules?
- transitive dependencies?
- no to putting node_modules on git, yes to putting package.json & package-lock.json on git
- npx(execute a package) vs npm(for installing a package)
- We can also use React in our project using npm
- The way to use React via CDN links is not the preferred way.

Ep3 learnings:

- Instead of calling npx parcel index.html, write the script in package.json
- npm start = npm run start
- Writing react code in .js file isn't making out lived easier. So they came up with JSX.
- Note that JSX is not a part of react or it is not the case that react can't be written w/o JSX.
- JSX = JS + HTML
- Now many think that jsx is nothing but html inside js, but it is not true. JSX is not html, it is an html-like syntax.
- JSX code is first converted to React Element(which is an object) which is then converted to html element.
- The task of converting jsx to react element is done by Babel (a transpiler or JS compiler). Parcel gives the responsibility of transpilation to Babel.
- Babel is not created by Facebook.
- The JS engine does not understand JSX because the JS engine understands ECMAScript or ES6+ code.
- Before the code gets to JS Engine it is sent to Parcel and Transpiled there.
- Transpilation â‡’ Converting the code in such a format that the browsers can understand.
- In JSX, attributes are given in Camel-case!
- Components in React => two types = Class-based(OLD way) and Functional(NEW way)
- A Functional Component is a function that "returns" some React element/JSX code.
- When we use one React component into another React Component, it is called Component Composition.
- Any JS expression can be written inside a Component by covering it inside a {}.
- If you want to use a component inside another component/element, use <Component /> or {Component()} and if you want to use an elemtent inside a component/element, use {Element}.
- <Component /> = <Component></Component>
- Also, JSX sanitises whatever info we bring under {} instead of blindly passing it further. Hence, it also checks Cross Site Scripting.

Ep4 Learnings:

- The best way in approaching any project is to plan first. Hence, planning is essential.
- 1st step of planning = creating a wireframe or UI design or layout.
- whatever properties are passed to the component, becomes a prop.
- "Destructuring on the Fly" - doing the same thing but without the word 'prop'.
- Passing props to a function is primarily a React concept, although it is built on JavaScript's ability to pass arguments to functions.
- "Destr. on the Fly" is a JS thing, not limited to just React.
- "Config-driven UI" refers to a design approach where the user interface (UI) is generated or configured based on external configuration data, rather than being hardcoded or statically defined in the application code.
- "Optional Chaining" = "?." => a feature introduced in JavaScript (ES2020) that helps to avoid runtime errors when trying to access properties on objects that may not exist, preventing you from writing multiple checks for each level.
- Whenever you're mapping through an Array (using Array.map), always pass a "key" unique to each of the item.
- The logic behind giving a key to each of the Array object, is because once a new entrant is there, unless the key is given, React will re-render every card from scratch, which leads to an optimisation issue or a performance hit.
- Another thing to note is that in the .map function, the index (of the mapped Array), is the second prop. Now, many developers pass the index of the Array as the key for each object since the index will be unique for each object, BUT React itself says that one shouldn't use indices as keys.

Ep5 Learnings:

- Industry standard to use a "src" file and "components" file, but it is not mandatory to follow a particular structure.
- Now, there are two kinds of exports: default(can only be one) and named.
- There's a Data layer and a UI layer. Each of the frameworks like React, Angular, etc. are trying to tackle on how to make the UI layer compatible with the Data layer. 
- And for that, React uses hooks. React Hooks are nothing but normal JS utility functions.
- The special thing about React hooks(useState, etc.) is that whenever a State variable updates, React re-renders the component, making the UI layer compatible with the changing data layer. 
- It is this property of React that makes it super-fast. 
- Important concepts accompanying this hook concept are: Virtual DOM, Reconciliation Algo (or React Fiber) and Diff Algo.

Ep6 Learnings:

- The fetch() is a feature that is provided not by React or JS, but by browser. It is a browser API used to make network requests (such as HTTP requests) to retrieve data from a server or send data to a server.
   - The fetch() function itself returns a Promise that resolves to a "Response" object once the HTTP request completes successfully.
   - The "Response" object contains methods like .json() to parse the actual response data.
   - Now, what is a "Promise"? => A Promise is an object representing the eventual completion (or failure) of an asynchronous operation. When the Promise resolves, you get the Response object.
   - The Response object represents the entire response to the request, including the data, headers, and status.
- A very important thing to note is that whenever state variable updates, react triggers a reconciliation cycle i.e it re-renders the whole component.
- Shimmer UI => a visual effect commonly used in web and mobile interfaces that helps to enhance user experience by visually indicating that data is being fetched or processed in the background, rather than leaving users with a blank or static screen.
- Diff b/w JS expressions and JS statements => Expressions are evaluated while Statements are executed.
- "async" and "await" are modern JavaScript keywords used to work with asynchronous code more easily. Async declares a function to be asynchronous and await can be used inside that async function to pause the execution of that function before waiting for the execution of the line of code where it is put. "await" is used to pause the execution of the function until the Promise is resolved (or rejected).

Ep7 Learnings:

- In useEffect, if there's no dependency array, then it'll run after each and every render of the component.
- But if an empty dependency array is there, then useEffect will be called only after the initial render.
- But if the dependency array is not empty and have some dependency, then useEffect will be called only (& everytime) when that dependency changes/updates.
- The thing to keep in mind is that the useEffect will always be called after the initial render.
- Never use useState o/s of the functional component. It is always used to create a local state variable inside the functional component.
- Also, one should not create useState in an if-else statement or a for loop or any conditionals or also under any functions inside the functional component. 
- useState is meant to be created only inside the functional component and are to be placed on the top of the code i/s the functional component.
- To create a Router setup in order to load various other pages, we need to install react-router-dom npm package.
- createBrowserRouter from react-router-dom helps in creating the router config, while RouterProvider is used to provide the project the router configuration.
- Note that RouterProvider (from react-router-dom) is a component.
- rafce => to create a boiler-plate of a component quickly.
- useRouteError => it is a hook provided by react-router-dom to give us more details about the error.
- In order to make the header and footer stay intact, we need children routes and an Outlet component (which is imported from react-router-dom).
- In react, whenever we want to route to another page from one, never use anchor tags. Because once we try to move towards another page using anchor tag, the whole page gets refreshed.
- In order to not refresh the whole page, react-router-dom comes up with the Link Component. It works exactly the same as anchor component. Only difference is that <a> has an "href" prop, while <Link> has a "to" prop. Now, behind the scenes, Link is nothing but an anchor tag.
- So, Link (unlike anchor) won't reload the whole page, but just refreshes the Outlet component only. That is why React is also known as Single Page Application (SPA). Hence, while navigating to different sub-sections of the website, under React, one doesn't have to reload the whole website again and again.
- Now, there are two types of routing that Web Applications (not just React) can have => 1) Client Side Routing & 2) Server Side Routing;
- Server Side Routing is when you make a networkcall, and the .html page is coming from the Server itself.
- Client Side Routing is what React does. It has already loaded up all the components in the first go when it loaded the App component. And whenever a page is clicked to be loaded, react just loads up the required component, without making any network call. This is called Client Side Routing.
- Hence, it is just a one page and the components are getting interchanged as per the need. That is why it is called Single Page Application (SPA).

Ep8 Learnings:

- Class-based-components (CBC) extends React.component and have a render method which returns the jsx code that we want. It was the earlier method of writing react code, now replaced by Functional components.
- To create props in CBC, we use Constructor(props) {}, and we have super(props) inside it. Why super(props)? => In JavaScript, when you create a subclass (like MyComponent extends React.Component), you are inheriting methods and properties from the parent class (React.Component).
  - The constructor method in the subclass (MyComponent) must call super() to initialize the parent class, otherwise, the subclass (MyComponent) doesn't have access to the "this" keyword and its properties from the parent class (React.Component).
- In order to create a State variable in CBC, we have to create it inside Constructor(props).
- To note: NEVER UPDATE STATE VARIABLE DIRECTLY USING "=".
- So how do we update our state variable in CBC? => by using this.setState().
- Note: In case this.State() have many elements, and if this.setState() updates only one or few of those elements, then React will update only those elements, and it won't touch the other elements. How you ask? => Remember the Reconciliation Algo containing the Diff Algo!
- In CBCs, what is the life cycle method? =>  In CBCs, when it is loaded/mounted, first, the constructor() is loaded, then it goes to the render() and then it goes to the componentDidMount(). In case, parent and child are there, then: parents' constructor => parents' render => child's constructor => child's render => child's componentDidMount => Parent's componentDidMount.
- Now, in case of multiple child components, the lifecycle follows the following path(example of two children):
   - Parent's constructor => Parent's render => 1st Child's constructor => 1st Child's render => 2nd Child's constructor => 2nd Child's render => 1st Child's componentDidMount => 2nd Child's componentDidMount => Parent's componentDidMount.
- Why is it like this? => Because, in CBCs, the React lifecycle used to have two phases: Render and Commit phases. 
- Also, it use to happen in three cycles: ComponentDidMount, componentWillUpdate and componentWillUnmount.
- In useEffect, we can give a call-back function that is run when the page is changed. 

Ep9 Learnings:

- In accordance with the Single Responsibility Principle, we created a custom hook called useRestaurantMenu in the utils. Now, in the Menu.js, since the data(of menu) fetching and display both were done in the same component. It becomes more efficient+testable+reusable to separate the fetching logic from the display logic. 
- That was the reason why we created the custom hook(useRestaurantMenu.js) which takes care of data fetching, while the Menu.js is only concerned with data display logic. That is how we implemented the principle of separation of concerns too. 
- Now, we know that the bundler we used is parcel, which bundles the whole code of all of our project. We can find the bundled code in the dist folder;
- Now, the bundler just bundles all the JS code in one file, which can be tiresome to load due to it being too huge. Here is where the concept of (Diff names for the same thing - Chunking, Code Splitting, Dynamic Bundling, Lazy Loading, On-Demand Loading, Dynamic import, etc) comes in. 
- Here the part of your app, is chunked into a separate JS bundle while bundling. This helps in efficient loading by decreasing the size of the JS file inside dist folder. 
- In React, Suspense is a feature that allows us to declaratively manage asynchronous data fetching and code-splitting in our applications.
- Suspense is primarily used in combination with the lazy() function for dynamic imports and with the React.lazy() component to improve the user experience when loading data or components asynchronously.
- When React encounters a Suspense boundary, it knows that there might be a delay in rendering, and it can handle that situation gracefully. But if Suspense is used in a synchronous component, it will throw an error, because Suspense is primarily for handling asynchronous component which requires a bit of delay, and a synchronous operations doesn't need any delay.

Ep10 Learnings:

- Higher Order Function => A function that takes a component as an input, enhances it by adding some extra features to it, and returns that component back as an output. Still, at the end of the day, it is just another JS function. And note that a component is also just another JS function.

- Learnt to use Tailwind CSS.

Ep11 Learnings:

- Learnt to build an accordian in react.
- Remember the distinction b/w .map, .filter and .find
- Using react-icons library for icons.
- Diff b/w <span> and <div>.
- Controlled vs Uncontrolled components.
- "Lifting the state up" => the state of children is decided by props from parents. For this the setState parameter of useState is sent to the children from parent component as a prop. Now, in order to know, how to send a function as a prop, it is like this: <ChildComponent setState={() => setState()} /> =>This is how you pass a function(here, it was setState) as a prop.
- The Problem of "Props Drilling" in React. What is the solution? => React "Context" ie createContext and useContext.
- Note: In a Class-Based Component, you cannot use context using useContext. It will need Context.Consumer.
- To specify/change the value inside the context => .Provider is used.

Ep12 Learnings:(Learning Redux)

- What is a Redux Store? => A central storage object, where we can put most(all if we want to) of the data, which can be used by any component.
- Now, since the data to be stored in the Redux store is going to be huge, we can make slices inside it. Each slice for a different kind of data.
- Now, how to put our data from our react code into redux or in other words, how to write data inside our store? Well, here's the pathway: (Suppose our data is sent when we click an "Add" button) "Add" button pressed => 'Dispatches' an action => Calls a function => This function will modify the slice of our Redux store.
- This function that modifies the redux slice, is known as a "reducer".
- Now, in order to read the existing data inside our Redux Store, we use something called as a "Selector". So, this selector will read the data i/s the Redux Store and update our React Component.
- This phenomenon where our React Component updates on the basis of the value inside the Redux Store is called as "Subscribing to the Store". So, our component is said to be subscribed to the store.
- Hence, that's how our two components(one which updates the Redux Store and the other which is updated by being subscribed to the Redux Store) is linked behind the scene. 
- Imp things to note:
   > While using the useSelect, always subscribe only to the required portion of the store. This will assist in improving efficiency. Otherwise, if a component is subscribed to more than the required portion of the store. Your component will be updated even when the not-required part of the subscription is changed, which has a huge effect on the efficiency of the project.
   > Use the "reducer" and "reducers" keywords very carefully.
   > In the earlier version of Redux, the clear instruction was to NEVER MUTATE THE STATE, instead one needed to create a newState with the same properties as the first one, and then mutate that newState and then it used to replace the previous State. But now in RTK, one HAVE TO EITHER MUTATE THE EXISTING STATE or RETURN A NEW STATE. The trick that RTK does is that the earlier manual task of creating a new State and replacing the older one is now being handled by a JS library called IMMER behind the scenes. 

Ep13 Learnings: (TESTING)

- Types of Testing that a developer can employ:
  1. Unit Testing: Testing one unit/component in isolation rather than the whole application.
  2. Integration Testing: It focuses on evaluating how different components or modules of a system work together when integrated. It ensures that the various parts of the application interact correctly when combined.
  3. End to End (e2e) Testing: This type of software testing evaluates the entire workflow of an application, from the initial user action to the final outcome, to ensure that the application behaves as expected in a real-world scenario.
- Now, as developers, we are majorly concerned with the first two types. 
- Testing is a part of coding. Writing test cases needs to be inculcated in the habit.
- Now, in order to test the code, there are many libraries, one of the widely popular ones is React Testing Library (RTL). It is built on top of DOM testing library.
- Now, if the react app is created by CREATE REACT APP, such libraries would have automatically been integrated.
- Also, React Testing Library uses something called as Jest => It is a framework/std to write test-cases when it comes to JS. It is basically, a JS testing framework. And the DOM Testing library, on which RTL is built, is using this Jest library.
- So, here are the steps to take to setting up testing in our app:
  => Install React Testing Library
  => Install Jest
  => Install Babel dependencies
  => Configure Babel
  => Configure Parcel Config file to disable default babel transpilation(that we got from Parcel)
  => Run "npm run test" with expected result: No tests found.
  => Jest configuration (npx jest --init)
  => Install jsdom library - It is a JS library that allows developers to interact with and manipulate HTML and DOM structures as if they were running in a browser, even though it's running server-side in Node.js.
  => Install @babel/preset-react to make "jsx" work in test cases.
  => Include @babel/preset-react inside of the babel config. => Now, to explain what this @babel/preset-react is doing - since babel is a transpiler (one form of language to another), this preset-react just converts the jsx code into html for testing to occur.
  => Install @testing-library/jest-dom to use "toBeInTheDocument".
- In testing, querying (ie screen.getBy__ or screen.getAllBy__) returns a react object.
- "test" and "it" are the same thing.
- When there are just too many test cases, it becomes difficult to keep track of them. We keep track of them by bunching them together in a block called as "describe".

 
